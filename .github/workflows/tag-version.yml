name: Create Release with Assets

on:
  push:
    branches:
      - master
      - main

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install cross-compilation dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi gcc-mingw-w64

      - name: Get latest tag
        id: get-latest-tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump-version
        run: |
          latest_tag=${{ steps.get-latest-tag.outputs.latest_tag }}
          version=${latest_tag#v}
          IFS='.' read -r major minor patch <<< "$version"
          new_patch=$((patch + 1))
          new_version="v$major.$minor.$new_patch"
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Build binaries
        run: |
          mkdir -p dist
          # Build for Linux AMD64
          echo "Building for linux/amd64..."
          GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go build -o "dist/incident-checker-${{ steps.bump-version.outputs.new_version }}-linux-amd64" .
          chmod +x "dist/incident-checker-${{ steps.bump-version.outputs.new_version }}-linux-amd64"

          # Build for Linux ARM64
          echo "Building for linux/arm64..."
          CC=aarch64-linux-gnu-gcc GOOS=linux GOARCH=arm64 CGO_ENABLED=1 go build -o "dist/incident-checker-${{ steps.bump-version.outputs.new_version }}-linux-arm64" .
          chmod +x "dist/incident-checker-${{ steps.bump-version.outputs.new_version }}-linux-arm64"

          # Build for Windows AMD64 (without serial support)
          echo "Building for windows/amd64..."
          CC=x86_64-w64-mingw32-gcc GOOS=windows GOARCH=amd64 CGO_ENABLED=1 go build -tags noserial -o "dist/incident-checker-${{ steps.bump-version.outputs.new_version }}-windows-amd64.exe" .

          # Build for macOS (without serial support)
          echo "Building for darwin/amd64..."
          GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -tags noserial -o "dist/incident-checker-${{ steps.bump-version.outputs.new_version }}-darwin-amd64" .
          echo "Building for darwin/arm64..."
          GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build -tags noserial -o "dist/incident-checker-${{ steps.bump-version.outputs.new_version }}-darwin-arm64" .

      - name: Generate SHA256 checksums
        id: sha
        run: |
          cd dist
          sha256sum * > checksums.txt
          echo "hashes=$(cat checksums.txt)" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          new_version=${{ steps.bump-version.outputs.new_version }}
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a "$new_version" -m "Release $new_version"
          git push origin "$new_version"

      - name: Create Release
        id: create-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.bump-version.outputs.new_version }}
          name: Release ${{ steps.bump-version.outputs.new_version }}
          draft: false
          prerelease: false
          files: |
            dist/*
          body: |
            ## Release ${{ steps.bump-version.outputs.new_version }}
            
            ### Assets
            - Linux (amd64, arm64) - Full functionality with serial support
            - macOS (amd64, arm64) - Basic functionality without serial support
            - Windows (amd64) - Basic functionality without serial support
            
            ### SHA-256 Checksums
            ```
            ${{ steps.sha.outputs.hashes }}
            ```
            
            ### Platform Notes
            - Linux builds include full serial port support
            - macOS and Windows builds exclude serial port functionality
            - For serial port support on macOS/Windows, please build from source
            
            ### Changes
            - Automated release from master branch
